import win32com.client
import os
import datetime
import zipfile

outlook = win32com.client.Dispatch('outlook.application').GetNamespace("MAPI")
inbox = outlook.GetDefaultFolder('6').Folders('ABCTest')
messages = inbox.Items

messages.Sort("[ReceivedTime]", True)

# Fetch only the latest email with subject containing 'FFTS'
latest_msg = None
for msg in messages:
    if 'FFTS' in str(msg.Subject):
        latest_msg = msg
        break

# Check if there is a latest email with 'FFTS' in the subject
if latest_msg:
    # Fetch To, CC, Subject, and From information from the latest email
    latest_subject = latest_msg.Subject
    latest_to = latest_msg.To
    latest_cc = latest_msg.CC
    latest_sender = latest_msg.SenderName

    print("Latest Subject:", latest_subject)
    print("To:", latest_to)
    print("CC:", latest_cc)
    print("From:", latest_sender)

    path = 'P:/Documents/PycharmProjects/pythonLearning/TestingFolder/'
    folder_extension = datetime.datetime.now().strftime("%Y%m%d")
    path_with_date = path + folder_extension
    if not os.path.exists(path_with_date):
        os.makedirs(path_with_date)

    unzip_path = 'P:/Ajith/Unzip/'
    unzip_extension = datetime.datetime.now().strftime("%Y%m%d")
    unzip_path_with_date = unzip_path + unzip_extension
    if not os.path.exists(unzip_path_with_date):
        os.makedirs(unzip_path_with_date)

    for atch in latest_msg.Attachments:
        # Save attachments with unique file names
        attachment_path = os.path.join(path_with_date, atch.FileName)
        if os.path.exists(attachment_path):
            # If the file already exists, add date and time as an extension to the file name
            unique_name = os.path.splitext(atch.FileName)
            now = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            new_attachment_name = f"{unique_name[0]}_{now}{unique_name[1]}"
            attachment_path = os.path.join(path_with_date, new_attachment_name)

        atch.SaveAsFile(attachment_path)

        # Check if the attachment is a zip file
        if attachment_path.lower().endswith('.zip'):
            # Unzip the file to the specified path
            with zipfile.ZipFile(attachment_path, 'r') as zip_ref:
                zip_ref.extractall(unzip_path_with_date)

    print("Attachments saved and unzipped successfully.")
else:
    print("No emails with subject containing 'FFTS' found in the folder.")
