import win32com.client
import os
import datetime
import zipfile

outlook = win32com.client.Dispatch('outlook.application').GetNamespace("MAPI")
inbox = outlook.GetDefaultFolder('6').Folders('ABCTest')
messages = inbox.Items

messages.Sort("[ReceivedTime]", True)

# Fetch only the latest email with subject containing 'FFTS'
latest_msg = None
for msg in messages:
    if 'FFTS' in str(msg.Subject):
        latest_msg = msg
        break

# Check if there is a latest email with 'FFTS' in the subject
if latest_msg:
    # Fetch To, CC, Subject, and From information from the latest email
    latest_subject = latest_msg.Subject
    latest_to = latest_msg.To
    latest_cc = latest_msg.CC
    latest_sender = latest_msg.SenderName

    print("Latest Subject:", latest_subject)
    print("To:", latest_to)
    print("CC:", latest_cc)
    print("From:", latest_sender)

    path = 'P:/Documents/PycharmProjects/pythonLearning/TestingFolder/'
    if not os.path.exists(path):
        os.makedirs(path)

    unzip_path = 'P:/Ajith/Unzip/'
    if not os.path.exists(unzip_path):
        os.makedirs(unzip_path)

    def handle_duplicate_name(file_path):
        # If the file already exists, add date and time as an extension to the file name
        unique_name = os.path.splitext(os.path.basename(file_path))
        now = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        new_file_name = f"{unique_name[0]}_{now}{unique_name[1]}"
        new_file_path = os.path.join(os.path.dirname(file_path), new_file_name)
        return new_file_path

    for atch in latest_msg.Attachments:
        # Save attachments with unique file names
        attachment_path = os.path.join(path, atch.FileName)
        if os.path.exists(attachment_path):
            attachment_path = handle_duplicate_name(attachment_path)
        atch.SaveAsFile(attachment_path)

        # Check if the attachment is a zip file
        if attachment_path.lower().endswith('.zip'):
            # Unzip the file to the specified path
            with zipfile.ZipFile(attachment_path, 'r') as zip_ref:
                for file_name in zip_ref.namelist():
                    unzipped_file_path = os.path.join(unzip_path, file_name)
                    while os.path.exists(unzipped_file_path):
                        unzipped_file_path = handle_duplicate_name(unzipped_file_path)
                    zip_ref.extract(file_name, unzip_path)

    print("Attachments saved and unzipped successfully.")
else:
    print("No emails with subject containing 'FFTS' found in the folder.")
