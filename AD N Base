# Define paths
$sourceFilePath = "C:\Source Files\U99.xlsx"
$rulesFilePath = "C:\rules.xlsx"
$coordinatorsPath = "C:\Coordinators\"

# Load the Excel COM object
$excel = New-Object -ComObject Excel.Application
$excel.Visible = $false
$excel.DisplayAlerts = $false

# Open the rules.xlsx file
$rulesWorkbook = $excel.Workbooks.Open($rulesFilePath)
$rulesSheet = $rulesWorkbook.Sheets.Item(1)

# Get the current month and year
$currentMonth = (Get-Date).ToString("MMMM")
$currentYear = (Get-Date).Year

# Get the last row with data in the B column of rules.xlsx
$lastRow = $rulesSheet.Cells($rulesSheet.Rows.Count, "B").End(-4162).Row

# Create a dictionary to hold filter criteria for each file name
$filterCriteria = @{}

# Loop through the rows starting from the 3rd row
for ($row = 3; $row -le $lastRow; $row++) {
    # Get the folder and file name from column B
    $fileName = $rulesSheet.Cells.Item($row, 2).Text

    # Get the filter values from columns E, F, G, H, I
    $filters = @()
    if ($rulesSheet.Cells.Item($row, 5).Text -ne "ALL") { $filters += $rulesSheet.Cells.Item($row, 5).Text }
    if ($rulesSheet.Cells.Item($row, 6).Text -ne "ALL") { $filters += $rulesSheet.Cells.Item($row, 6).Text }
    if ($rulesSheet.Cells.Item($row, 7).Text -ne "ALL") { $filters += $rulesSheet.Cells.Item($row, 7).Text }
    if ($rulesSheet.Cells.Item($row, 8).Text -ne "ALL") { $filters += $rulesSheet.Cells.Item($row, 8).Text }
    if ($rulesSheet.Cells.Item($row, 9).Text -ne "ALL") { $filters += $rulesSheet.Cells.Item($row, 9).Text }

    # Combine filters for the same file name
    if ($filterCriteria.ContainsKey($fileName)) {
        $filterCriteria[$fileName] = $filterCriteria[$fileName] + $filters
    } else {
        $filterCriteria[$fileName] = $filters
    }
}

# Close the rules workbook
$rulesWorkbook.Close()

# Process each file name in the filter criteria
foreach ($fileName in $filterCriteria.Keys) {
    # Construct the folder path
    $folderPath = Join-Path $coordinatorsPath $fileName

    # Check if the folder exists, if not, create it
    if (-not (Test-Path -Path $folderPath)) {
        New-Item -ItemType Directory -Path $folderPath | Out-Null
    }

    # Construct the destination file name
    $destinationFileName = "${fileName}_${currentMonth}_${currentYear}.xlsx"
    $destinationFilePath = Join-Path $folderPath $destinationFileName

    # Copy the source file to a temporary location
    $tempFilePath = Join-Path $coordinatorsPath "Temp_$destinationFileName"
    Copy-Item -Path $sourceFilePath -Destination $tempFilePath -Force

    # Open the copied file
    $workbook = $excel.Workbooks.Open($tempFilePath)
    $sheet = $workbook.Sheets.Item(1)

    # Apply filters based on the criteria
    $filters = $filterCriteria[$fileName]
    if ($filters.Count -gt 0) {
        # Assuming that columns CR, CT, CV, CX, CZ are equivalent to A, B, C, D, E in Excel
        $columnMapping = @{
            "CR" = 1
            "CT" = 2
            "CV" = 3
            "CX" = 4
            "CZ" = 5
        }

        foreach ($filter in $filters) {
            foreach ($column in $columnMapping.Keys) {
                $columnIndex = $columnMapping[$column]

                # Apply the filter to the appropriate column
                $sheet.UsedRange.AutoFilter($columnIndex, $filter, 1)  # 1 = xlFilterValues
            }
        }
    }

    # Save and close the workbook
    $workbook.SaveAs($destinationFilePath)
    $workbook.Close()

    # Remove the temporary file
    Remove-Item -Path $tempFilePath -Force
}

# Quit Excel application
$excel.Quit()

# Release COM objects to avoid file locking
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($sheet) | Out-Null
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($workbook) | Out-Null
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($excel) | Out-Null

# Remove variables
Remove-Variable sheet
Remove-Variable workbook
Remove-Variable excel
Remove-Variable rulesSheet
Remove-Variable rulesWorkbook

Write-Host "Files copied, folders created, data filtered, and Excel closed successfully."
