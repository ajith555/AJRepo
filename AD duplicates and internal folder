Dim objExcelApplication As Object ' Use Object type to late-bind Excel
Dim objExcelWorkbook As Object
Dim objExcelWorksheet As Object
Dim objNamespace As Outlook.Namespace
Dim objAccount As Outlook.Account
Dim objInbox As Outlook.Folder

Sub ExportEmailsNotRepliedAndMove()
    ' Define the email ID of the account to use
    Dim accountEmail As String
    accountEmail = "youremail@example.com" ' Replace with the desired email ID
    
    ' Initialize Outlook objects
    Set objNamespace = Application.GetNamespace("MAPI")
    Set objInbox = objNamespace.GetDefaultFolder(olFolderInbox)

    ' Find the specified email account
    For Each objAccount In objNamespace.Accounts
        If objAccount.SmtpAddress = accountEmail Then
            ' Set the folder to the Inbox of the selected account
            Set objInbox = objAccount.DeliveryStore.GetDefaultFolder(olFolderInbox)
            Exit For
        End If
    Next objAccount

    If objInbox Is Nothing Then
        MsgBox "Specified account not found.", vbExclamation
        Exit Sub
    End If

    ' Create Excel objects
    Set objExcelApplication = CreateObject("Excel.Application")
    Set objExcelWorkbook = objExcelApplication.Workbooks.Add
    Set objExcelWorksheet = objExcelWorkbook.Worksheets(1)

    ' Set headers in the Excel worksheet
    With objExcelWorksheet
        .Cells(1, 1) = "Subject"
        .Cells(1, 1).Font.Bold = True
        .Cells(1, 2) = "Received"
        .Cells(1, 2).Font.Bold = True
        .Cells(1, 3) = "Sender"
        .Cells(1, 3).Font.Bold = True
        .Cells(1, 4) = "Receiver"
        .Cells(1, 4).Font.Bold = True
        .Cells(1, 5) = "Excerpts"
        .Cells(1, 5).Font.Bold = True
    End With

    ' Make Excel visible
    objExcelApplication.Visible = True
    objExcelWorkbook.Activate

    ' Format Excel worksheet
    With objExcelWorksheet
        .Columns("A:E").AutoFit
        .Rows.RowHeight = 15
        .Columns("E").ColumnWidth = 100
        .Columns("E").WrapText = False
    End With

    ' Find or create the target folder
    Dim targetFolderName As String
    targetFolderName = "(1) AGED Internal"
    Dim objTargetFolder As Outlook.Folder
    On Error Resume Next
    Set objTargetFolder = objNamespace.GetDefaultFolder(olFolderInbox).Folders(targetFolderName)
    On Error GoTo 0
    If objTargetFolder Is Nothing Then
        ' Create the target folder if it doesn't exist
        Set objTargetFolder = objNamespace.GetDefaultFolder(olFolderInbox).Folders.Add(targetFolderName)
    End If

    ' Process folders and emails
    Call ProcessAndMoveEmails(objInbox, objTargetFolder)
End Sub

Sub ProcessAndMoveEmails(ByVal objCurrentFolder As Outlook.Folder, ByVal objTargetFolder As Outlook.Folder)
    Dim i As Long
    Dim objMail As Outlook.MailItem
    Dim strReplied As String
    Dim nDateDiff As Integer
    Dim nLastRow As Integer

    For i = objCurrentFolder.Items.Count To 1 Step -1
        If objCurrentFolder.Items(i).Class = olMail Then
            Set objMail = objCurrentFolder.Items(i)
            strReplied = objMail.PropertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x10810003")
            
            ' Calculate the time difference in hours (48 hours = 2 days)
            nDateDiff = DateDiff("h", objMail.ReceivedTime, Now)
            
            If (Not (strReplied = 102)) And (Not (strReplied = 103)) And (nDateDiff <= 48) Then
                ' Late-bind Excel worksheet
                nLastRow = objExcelWorksheet.Cells(objExcelWorksheet.Rows.Count, "A").End(-4162).Row + 1
                With objExcelWorksheet
                    .Cells(nLastRow, 1) = objMail.Subject
                    .Cells(nLastRow, 2) = objMail.ReceivedTime
                    .Cells(nLastRow, 3) = objMail.SenderName
                    .Cells(nLastRow, 4) = objMail.To ' Receiver's Name
                    .Cells(nLastRow, 5) = Left(Trim(objMail.Body), 100) & "..."
                End With
                
                ' Move the email to the target folder
                objMail.Move objTargetFolder
            End If
        End If
    Next

    ' Recursively process subfolders
    If objCurrentFolder.Folders.Count > 0 Then
        For Each objSubfolder In objCurrentFolder.Folders
            Call ProcessAndMoveEmails(objSubfolder, objTargetFolder)
        Next
    End If
End Sub
