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

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>AI Team Portal</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 p-4">
  <h1 class="text-3xl font-bold text-center mb-4">🤖 AI Team Info Tool</h1>

  <!-- Team Selector -->
  <div class="text-center mb-4">
    <label class="font-semibold mr-2">Select Team:</label>
    <select id="teamSelector" class="p-2 border rounded" onchange="switchTeam()">
      <option value="team_default">Default Team</option>
      <option value="team_hr">HR Team</option>
      <option value="team_tech">Tech Team</option>
    </select>
  </div>

  <div class="flex flex-col md:flex-row gap-4">
    <!-- Admin Panel -->
    <div class="md:w-1/2 bg-white p-4 rounded shadow">
      <h2 class="text-xl font-semibold mb-2">🔒 Admin Panel</h2>
      <textarea id="adminData" class="w-full h-32 border p-2 mb-2" placeholder="Enter new info..."></textarea>
      <input type="file" id="fileUpload" accept="image/*,audio/*" class="mb-2"/>
      <button onclick="saveData()" class="bg-blue-500 text-white px-4 py-2 rounded w-full">💾 Save Data</button>
      <div id="adminHistory" class="mt-4 text-sm text-gray-700 max-h-60 overflow-y-auto"></div>
    </div>

    <!-- AI Chat Panel -->
    <div class="md:w-1/2 bg-white p-4 rounded shadow">
      <h2 class="text-xl font-semibold mb-2">💬 Ask the AI</h2>
      <div id="chatBox" class="h-60 overflow-y-scroll border p-2 mb-2 bg-gray-50 text-sm"></div>
      <input id="userQuestion" class="w-full border p-2 mb-2" placeholder="Ask a question..."/>
      <button onclick="askAI()" class="bg-green-600 text-white px-4 py-2 rounded w-full">🤖 Get Answer</button>
    </div>
  </div>

  <script>
    let currentTeam = localStorage.getItem("currentTeam") || "team_default";
    let adminDataStore = JSON.parse(localStorage.getItem(currentTeam) || "[]");

    function switchTeam() {
      currentTeam = document.getElementById("teamSelector").value;
      localStorage.setItem("currentTeam", currentTeam);
      adminDataStore = JSON.parse(localStorage.getItem(currentTeam) || "[]");
      updateAdminHistory();
    }

    function saveData() {
      const text = document.getElementById("adminData").value.trim();
      const fileInput = document.getElementById("fileUpload");

      if (text) {
        adminDataStore.push({ type: "text", content: text });
      }

      if (fileInput.files.length > 0) {
        const file = fileInput.files[0];
        const reader = new FileReader();
        reader.onload = function () {
          const type = file.type.startsWith("image") ? "image" : "audio";
          adminDataStore.push({ type, content: reader.result });
          persistAndDisplay();
        };
        reader.readAsDataURL(file);
      } else {
        persistAndDisplay();
      }

      document.getElementById("adminData").value = "";
      fileInput.value = "";
    }

    function persistAndDisplay() {
      localStorage.setItem(currentTeam, JSON.stringify(adminDataStore));
      updateAdminHistory();
    }

    function updateAdminHistory() {
      const div = document.getElementById("adminHistory");
      div.innerHTML = adminDataStore.map((d, i) => {
        if (d.type === "text") return `<div>${i + 1}. 📝 ${d.content}</div>`;
        if (d.type === "image") return `<div>${i + 1}. 🖼️ <img src="${d.content}" width="100"/></div>`;
        if (d.type === "audio") return `<div>${i + 1}. 🔊 <audio controls src="${d.content}"></audio></div>`;
      }).join("");
    }

    async function askAI() {
      const question = document.getElementById("userQuestion").value.trim();
      if (!question) return;

      const chatBox = document.getElementById("chatBox");
      chatBox.innerHTML += `<div><strong>You:</strong> ${question}</div>`;

      const context = adminDataStore
        .filter(d => d.type === "text")
        .map(d => d.content)
        .join("\n");

      const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
        method: "POST",
        headers: {
          Authorization: "Bearer YOUR_API_KEY_HERE", // 👈 Replace this line
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          model: "openai/gpt-3.5-turbo",
          messages: [
            { role: "system", content: "You are a helpful assistant answering only from company-provided admin context." },
            { role: "user", content: `Here is the latest internal company info:\n\n${context}` },
            { role: "user", content: `Now answer this user question clearly and briefly:\n${question}` }
          ]
        })
      });

      try {
        const data = await response.json();
        const reply = data?.choices?.[0]?.message?.content || "AI could not generate a response.";
        chatBox.innerHTML += `<div><strong>AI:</strong> ${reply}</div>`;
        document.getElementById("userQuestion").value = "";
        chatBox.scrollTop = chatBox.scrollHeight;
      } catch (err) {
        chatBox.innerHTML += `<div><strong>AI:</strong> Error fetching response.</div>`;
        console.error("AI Error:", err);
      }
    }

    updateAdminHistory(); // load on start
  </script>
</body>
</html>
