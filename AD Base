Option Explicit

Public Sub UpdateCopySheetAH(Optional ByVal strArgumentAH As String = "")
    On Error GoTo ErrHandler
    
    Dim wbMacro As Workbook
    Dim wsRules As Worksheet
    Dim wbCopy As Workbook
    Dim wsCopy As Worksheet
    
    Dim lastRuleRow As Long, lastCopyRow As Long
    Dim i As Long, j As Long
    
    Dim valA As String, valB As String, valC As String, valD As String, valE As String
    Dim valF As Variant
    Dim copyT As String, copyAN As String, copyAM As String, copyAL As String, copyAQ As String
    Dim joinDate As Date, yearsDiff As Long
    Dim matchOk As Boolean
    
    Dim exclPart As String
    Dim exclList As Variant
    Dim k As Long
    Dim dParts As Variant
    Dim numTxt As String, numVal As Long
    Dim fName As String
    
    Set wbMacro = ThisWorkbook
    Set wsRules = Nothing
    On Error Resume Next
    Set wsRules = wbMacro.Worksheets("AH")
    On Error GoTo ErrHandler
    If wsRules Is Nothing Then
        MsgBox "Sheet 'AH' not found in " & wbMacro.Name, vbCritical
        Exit Sub
    End If
    
    ' If no path supplied, prompt user to pick the target workbook
    If Trim(strArgumentAH) = "" Then
        With Application.FileDialog(msoFileDialogFilePicker)
            .AllowMultiSelect = False
            .Title = "Select the target workbook (must contain sheet 'Copy')"
            .Filters.Clear
            .Filters.Add "Excel Files", "*.xlsx;*.xlsm;*.xls"
            If .Show = -1 Then
                strArgumentAH = .SelectedItems(1)
            Else
                MsgBox "No file selected. Operation cancelled.", vbInformation
                Exit Sub
            End If
        End With
    End If
    
    fName = Trim(strArgumentAH)
    If fName = "" Then
        MsgBox "No file path provided.", vbCritical
        Exit Sub
    End If
    
    ' Check file exists
    If Dir(fName) = "" Then
        MsgBox "Target file not found: " & fName, vbCritical
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    ' Open target workbook
    Set wbCopy = Workbooks.Open(Filename:=fName, ReadOnly:=False)
    Set wsCopy = Nothing
    On Error Resume Next
    Set wsCopy = wbCopy.Worksheets("Copy")
    On Error GoTo ErrHandler
    If wsCopy Is Nothing Then
        MsgBox "Sheet 'Copy' not found in " & wbCopy.Name, vbCritical
        wbCopy.Close SaveChanges:=False
        GoTo Cleanup
    End If
    
    lastRuleRow = wsRules.Cells(wsRules.Rows.Count, "A").End(xlUp).Row
    lastCopyRow = wsCopy.Cells(wsCopy.Rows.Count, "A").End(xlUp).Row
    
    ' Loop rules top-down. For each rule, apply to ALL rows in Copy where AH is empty (first match locks).
    For j = 2 To lastRuleRow
        valA = Trim(CStr(wsRules.Cells(j, "A").Value))
        valB = Trim(CStr(wsRules.Cells(j, "B").Value))
        valC = Trim(CStr(wsRules.Cells(j, "C").Value))
        valD = Trim(CStr(wsRules.Cells(j, "D").Value))
        valE = Trim(CStr(wsRules.Cells(j, "E").Value))
        valF = wsRules.Cells(j, "F").Value
        
        For i = 2 To lastCopyRow
            ' Only process if AH is blank (first-match locks)
            If Trim(CStr(wsCopy.Cells(i, "AH").Value)) = "" Then
                copyT = Trim(CStr(wsCopy.Cells(i, "T").Value))
                copyAN = Trim(CStr(wsCopy.Cells(i, "AN").Value))
                copyAM = Trim(CStr(wsCopy.Cells(i, "AM").Value))
                copyAL = Trim(CStr(wsCopy.Cells(i, "AL").Value))
                copyAQ = Trim(CStr(wsCopy.Cells(i, "AQ").Value))
                
                matchOk = True
                
                ' --- A check: Ajith A contains (or "All") ---
                If LCase(valA) <> "all" Then
                    If InStr(1, valA, copyT, vbTextCompare) = 0 Then matchOk = False
                End If
                
                ' --- B check ---
                If matchOk Then
                    If LCase(valB) <> "all" Then
                        If InStr(1, valB, copyAN, vbTextCompare) = 0 Then matchOk = False
                    End If
                End If
                
                ' --- C check ---
                If matchOk Then
                    If LCase(valC) <> "all" Then
                        If InStr(1, valC, copyAM, vbTextCompare) = 0 Then matchOk = False
                    End If
                End If
                
                ' --- D check (country) ---
                If matchOk Then
                    If LCase(valD) <> "all" Then
                        If InStr(1, LCase(valD), "all except") > 0 Then
                            exclPart = Trim(Replace(LCase(valD), "all except", ""))
                            If Len(exclPart) > 0 Then
                                exclList = Split(exclPart, ",")
                                For k = LBound(exclList) To UBound(exclList)
                                    If Trim(LCase(copyAL)) = Trim(LCase(exclList(k))) Then
                                        matchOk = False
                                        Exit For
                                    End If
                                Next k
                            End If
                        Else
                            If InStr(1, valD, copyAL, vbTextCompare) = 0 Then matchOk = False
                        End If
                    End If
                End If
                
                ' --- E check (years) using Year difference only ---
                If matchOk Then
                    If LCase(valE) <> "all" Then
                        ' parse join date from copyAQ (expected DD.MM.YYYY or DD-MM-YYYY)
                        If copyAQ <> "" Then
                            copyAQ = Replace(copyAQ, "-", ".")
                            dParts = Split(copyAQ, ".")
                            If UBound(dParts) = 2 Then
                                On Error Resume Next
                                joinDate = DateSerial(CInt(dParts(2)), CInt(dParts(1)), CInt(dParts(0)))
                                If Err.Number <> 0 Then
                                    Err.Clear
                                    matchOk = False
                                End If
                                On Error GoTo ErrHandler
                            Else
                                matchOk = False
                            End If
                        Else
                            matchOk = False
                        End If
                        
                        If matchOk Then
                            yearsDiff = Year(Date) - Year(joinDate)
                            numTxt = LCase(valE)
                            numTxt = Replace(numTxt, "years", "")
                            numTxt = Replace(numTxt, "year", "")
                            numTxt = Replace(numTxt, " ", "")
                            
                            If Len(numTxt) = 0 Then
                                matchOk = False
                            ElseIf Left(numTxt, 1) = ">" Or Left(numTxt, 1) = "<" Then
                                numVal = CLng(Mid(numTxt, 2))
                                If Left(numTxt, 1) = ">" Then
                                    If Not (yearsDiff > numVal) Then matchOk = False
                                Else
                                    If Not (yearsDiff < numVal) Then matchOk = False
                                End If
                            Else
                                ' If no operator found, treat as exact-equals to the provided number
                                numVal = CLng(numTxt)
                                If Not (yearsDiff = numVal) Then matchOk = False
                            End If
                        End If
                    End If
                End If
                
                ' If all checks true -> update AH in Copy
                If matchOk Then
                    wsCopy.Cells(i, "AH").Value = valF
                End If
            End If
        Next i
    Next j
    
    ' Save & close
    wbCopy.Close SaveChanges:=True
    MsgBox "Update completed successfully!", vbInformation

Cleanup:
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Exit Sub

ErrHandler:
    MsgBox "Error " & Err.Number & ": " & Err.Description & vbCrLf & _
           "j=" & j & " i=" & i & vbCrLf & "File: " & fName, vbCritical
    On Error Resume Next
    If Not wbCopy Is Nothing Then wbCopy.Close SaveChanges:=False
    Resume Cleanup
End Sub
